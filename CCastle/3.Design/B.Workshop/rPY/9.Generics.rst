.. include:: /std/localtoc.irst

Generics: Parameters, Wrappers  and template-specialisation
***********************************************************

.. post:: 2023/10/10
   :category: Castle, rough
   :tags: Castle, DesignStudy, Language

   Castle supports **Generics** (a bit like *Templates* in C++) but with a twist. For example, in (the improved version of)
   “:ref:`Castle-TheSieve`” we use the ``SlowStart`` (base)protocol as a Generic protocol.

   It becomes **generic** as we pass an ``Argument`` to the base-class. Only that makes ``SlowStart`` a generic!
   |BR|
   It is not visual in the definition.


   As this differs from other languages, it gives some questions. We will explain how to use it. And make some
   (high-level) hints on the implementation.

   .. todo::

      Despite this scribble is started  in :ref:`rPY`, is has become more of a :ref:`Language-Design` item. One day, we
      will move it to a better place.

SlowStart & Sieve
=================

.. warning::

   In this example, one is a ``Protocol`` and the other is a ``Component``. Nonetheless, that is an irrelevant detail --
   the same applies to other constructs (that supports Generics -- most do).

The definitions
---------------

As “being a generic” isn’t visual in the definition, let’s compare two definition in :ref:`Castle-TheSieve`. That of the
Slowstart protocol, and the Sieve component.


Both are defined with a formal argument (aka a *parameter*). Although it is needed to have (at least) a parameter, this
does not reveal one is (used as) a *Generic*. A list of (one of more) TypedParameters just give the option to pass a
value(s); here an int in both cases. -- like we can in most languages when we instantiate a class.

.. code-block:: ReasonML
   :emphasize-lines: 1

   protocol SlowStart(queue_max:int): EventProtocol {
    setMax(queue_len:int);
   }

.. code-block:: ReasonML
   :emphasize-lines: 1

   component Sieve(onPrime:int) : Component {
     port SimpleSieve<in>:try;
     port SimpleSieve<out>:coprime;
   }

Instantiate vs Specialise
-------------------------

Nevertheless when *using* the SlowStart protocol --here when defining the SimpleSieve protocol-- it becomes clear that
SlowStart is (used as) a *Generic*. A ``Parameter`` (here: ‘1’) is bound to a parameter during the definition of
SimpleSieve.

.. code-block:: ReasonML
   :emphasize-lines: 1

   protocol SimpleSieve : SlowStart(1) {
      input(int:try);
   }

By passing a (one or more) parameter(s) when “subclassing”, we kind of **specialise** the *Generic* into a “wrapper
class” in between the (real) base-class and the derived-class. This in-between protocol (often denoted as ``Base(1)`` or
``Base_1``) in *not* instantiated  --it still acts as a “class”.  And so, can be subclassed.
|BR|
It acts exactly as the (real) base-class, except that the bound parameter has become build-in -- kind of what you expect.

The Sieve Component is *used* completely dissimilar (or: more traditionally). It is instantiated somewhere in executable
code, as we see below.

.. code-block:: ReasonML
   :emphasize-lines: 6

   SimpleSieve.input(newPrime) on self.finder.found
   {
     alias s;

     // Extent the sieve-list ...
     s:= Sieve.new(newPrime); // See caution, below
     ...

.. caution::

   The code above uses the code-snipped: ``s:= Sieve.new(newPrime)``, with the **new()** method. That syntax-detail is fully stable yet.
   It could be that it becomes ``s:= Sieve(newPrime)`` (as in Python), or ...

The difference
--------------

The difference is clear:

* When the protocol/component is “new’d”, or “called”, we *instantiate*.
  |BR|
  And we get an element (aka: a class-instance).
* When we bound a parameter during a definition, we *specialise*.
  |BR|
  The result is like a “class”.


Another view
============

Instantiate generic
-------------------

You may wonder, what happens as we instance a *Generic*. For example like:

.. code-block:: ReasonML

   - strangeDemo(self, ...)
   {
   ...
   p =  SlowStart(42) // Remember: SlowStart is (also, used as) a Generic.
   ...
   }

This is allowed! Now, ``p`` [#UselessP]_ has become an instanced protocol (aka an object-instance), where ``queue_max``
is initialised to ‘42’.


Partials (aka closure)
----------------------

Some languages support the functional-programming feature “`partial(s)
<https://en.wikipedia.org/wiki/Partial_application>`__” and/or the related “`closure
<https://en.wikipedia.org/wiki/Closure_(computer_programming)>`__” construct. Both have the ability to *fix* some
parameters of existing functions to create a new function with less parameters. Conceptually, it is a function that
calles another function (with more parameters), without writing-out that function completely.

The Castle approach to *Generics* is very simular: A SlowStart parameters is “fixed” (we speak about ‘bound’) such that
the derived SimpleSieve protocol doesn't need to set in when it is initialised.
|BR|
In the ``SlowStart``//``SimpleSieve`` example, we could define a ``SlowStart1`` protocol, by reusing the general
``SlowStart`` protocol, but hardcoding the initial values to 1. And derived from that ``SlowStart1`` protocol to define
SimpleSieve.

.. code-block:: ReasonML

   // This is all pseudo code -- not valid Castle syntax
   protocol SlowStart1 (SlowStart);
   implement SlowStart1::
   - init(self) {
     super.init(1)
   }

And, we can do the same for ``SlowStart2``, ``SlowStart3``, ``...42``, etc.
|BR|
Or, we can automate that. By binding that parameter by specialising the Generic when we need it.

The effect is the same. Only Castle will generate that code for you.


.. rubric:: Footnotes

.. [#UselessP]
   *Allowed* does not imply **useful**. Probably this `p` is completely useless.
   |BR|
   Aside that Protocols are typically used between -- not inside-- Components, this protocol only has one Event:
   ``setMax()`` to change the length of the queue. By itself the SlowStart protocol is futile -- it merely models the
   *slow start* feature to limit the number of event that aren’t handled (by the receiver) by delaying the sender. And
   increases (or changes) that limit by the pseudo event setMax().

   Notwithstanding, it is allowed and eventually somebody will find a use even for this extreme example -- doubtless in
   a test or demo.
   |BR|
   For now, and here: ignore the (functional) uselessness. It is a simple example of *Generic-instantiation*. Regularly,
   useful cases are much longer and more complex.
