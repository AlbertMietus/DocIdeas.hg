.. -*-rst-*-  (C) 2023,2024 Albert Mietus. Part of CCastle project
   included in  `1.TheSieve.rst`
.. NOTE the code-tabs use ReasonML , but it is Castle-code!!

.. tabs::

   .. code-tab:: ReasonML Main

      implement Main {
        sub generator;
        sub finder;
        alias lastSieve;         // The list of Sieve's grow dynamically!; keep track of the last one


   .. code-tab:: ReasonML init()

      init() {
        super.init();

        .generator := Generator();
        .finder    := Finder();

        // Initially, there aren't any Sieves, so ...
        .generator.outlet = .finder.newPrime;     // ... connect the generator to the finder
        .lastSieve := Ground;                     // Not needed (as default); but it clarifies the code below
      }


   .. code-tab:: ReasonML finder.found

      // We have extend the sieve-list (and reconnect), for every newly found prime.
      SimpleSieve.input(newPrime) on .finder.found
      {
        alias s;

        // Extent the sieve-list ...
        s:= Sieve(newPrime);
        insert_sieve(s);
        verifyCorrectPrime(newPrime);
      }

   .. code-tab:: ReasonML local functions

      insert_sieve(alias:s) {
        // Connect the input of S to the lastSieve, or to the Generator
        if (.lastSieve == Ground) {            // .lastSieve == Ground, so not connected, so we have the first Sieve to connect to .generator
           .generator.outlet = s.try;
         } else {
           .lastSieve.coprime = s.try;
        }

        s.coprime = .finder.newPrime;          // Connect to output of S to the finder
        .lastSieve := s                        // a new lastSieve
      }

      verifyCorrectPrime(int:gotPrime) {
           local int count:=0; ///Semantics: instance var, with function-local scope
           cons PRIMES:= [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];

           if count >= len(PRIMES) {
              print("Warning: Can only check {len(PRIMES)} primes, {gotPrime) is not verified")
              return
           }

           expect := PRIMES[count]
           if expect != gotPrime {
              printf("ERROR: Prime no {count} should be {expect}, but got {gotPrime}”)

           count += 1;


   .. code-tab:: ReasonML  powerOn()

      powerOn(int:max=10) // this kick-starts “every main”
      {
        .generator.runTo(max);
      }

