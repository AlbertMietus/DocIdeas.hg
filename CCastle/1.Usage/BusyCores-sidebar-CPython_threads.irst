.. -*- rst -*-
   included in  `4.FSMs-are-needed.rst`

.. sidebar:: Threads in CPython

   When Python_ was conceived (early 198X) the word was single-core. And even though there were already debates on very
   advanced `M:N <https://en.wikipedia.org/wiki/Thread_(computing)#M:N_(hybrid_threading)>`__ models , threads_ where
   basically an option within one process. When one thread was running, “all cores” where busy...
   |BR|
   Backthen, the design-choice was made to use now famous GIL_ [#GIL-speed]_ to implement the Critical-Sections_
   [#CS-link]_ in CPython_.

   With hindsight that was not the best approach. Even the python-developer has real threads and the CPython_
   implementation is using a  pthreads_\-thread for every python-thread, this GIL results in  no-speedup on a
   Multi-Core_ system. As many studies show: all cores will be used(!) but only one thread, so one core is really active
   at a given moments.

   This shows that *“keeping the cores busy”* is not trivial. And remember; it’s not a flaw of python. Other
   implementation --like Jython_ [#python27-outdated]_  with used the JAVA-VM as runtime and IronPython_
   [#python27-outdated]_ that used the .Net environment-- use another (more modern) design; in both cases, we get the
   Multi-Core_ speed-up that we expects






.. _CPython:		https://en.wikipedia.org/wiki/CPython
.. _Python:		https://en.wikipedia.org/wiki/Python_(programming_language)#History
.. _pthreads: 		https://en.wikipedia.org/wiki/Pthreads
.. _GIL:		https://en.wikipedia.org/wiki/Global_interpreter_lock
.. _Jython:		https://en.wikipedia.org/wiki/Jython
.. _IronPython:		https://en.wikipedia.org/wiki/IronPython
