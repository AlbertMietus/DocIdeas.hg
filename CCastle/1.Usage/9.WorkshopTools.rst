.. include:: /std/localtoc.irst

.. _Castle-WorkshopTools:

==============
Workshop Tools
==============


.. post:: 
   :category: Castle, Usage,
   :tags: Castle, Tools

   The Castle Compiler will translate your source into executable code. But there are many more tools needed to work
   effectively with the “Best language ever” and we are not talking about debuggers! The Castle workbench can do so
   much more to make your code outstanding.

   Probably you have many questions about the code, like the fan-out & -in, what is connected to what, etc. You can ask
   Castle (as a workshop) for the answer!



Classic tools are not sufficient
================================

Most languages come with a compiler_ and optionally a debugger_. The compiler_ (and it’s companions: linker, loader)
translate files with source code into *computer code*; often called the “binaries”. Nowadays, an “optimiser_” is usually
build-in, to unburden the developer from details that make the code more efficient. So, that (s)he can make code
readable and maintainable; e.g.  by employing extra local, well-named variables that do not result in more memory use,
use convenient loops, which are unrolled automatically, etc. Originally, the intent was to optimise binaries; but they
help to improve the source for developers too.
|BR|
The second tool is the “source-level debugger_\”. It understands the binary, and is able to correlate that with the
original source -- this isn’t trivial; especially not due the optimiser_. It is an awesome tool when there is a bug in
the code; as the developer can step “line by line” through the source-code, examine in between results and even change
some parameters on the fly. Once this was the only way to improve code. In the present-day, we have other instruments
too; like Test-Driven-Development to prevent the most nasty flows in the first place.




.. _Compiler:	https://en.wikipedia.org/wiki/Compiler
.. _Debugger:	https://en.wikipedia.org/wiki/Debugger
.. _Optimiser:	https://en.wikipedia.org/wiki/Optimizing_compiler
.. _TDD:	https://en.wikipedia.org/wiki/Test-driven_development
.. _Test-Driven-Development: TDD_
